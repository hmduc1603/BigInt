{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bigint\/aboutbint"]}],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"BigInt"}],"title":"About BInt"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/BigInt\/documentation\/BigInt\/BInt","isActive":true,"type":"reference"},{"text":" values are represented with magnitude and sign:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"The magnitude is an array of unsigned 64 bit integers (a.k.a. Limbs)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The sign is a boolean value, ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":" means value < 0, "},{"type":"codeVoice","code":"false"},{"text":" means value >= 0","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The representation is little-endian, least significant Limb has index 0","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The representation is minimal, there is no leading zero Limbs. The exception is that the value 0 is represented as a single 64 bit zero Limb and sign "},{"type":"codeVoice","code":"false"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","anchor":"Creating-BInts","level":3,"text":"Creating BInt’s"},{"type":"codeListing","syntax":"swift","code":["\/\/ From an integer","let a = BInt(27)","","\/\/ From a decimal value","let x = BInt(1.12345e30) \/\/ x = 1123450000000000064996914495488","","\/\/ From string literals","let b = BInt(\"123456789012345678901234567890\")!","let c = BInt(\"1234567890abcdef1234567890abcdef\", radix: 16)!","","\/\/ From magnitude and sign","let m: Limbs = [1, 2, 3]","let d = BInt(m) \/\/ d = 1020847100762815390427017310442723737601","let e = BInt(m, true) \/\/ e = -1020847100762815390427017310442723737601","","\/\/ From a big-endian 2's complement byte array","let f = BInt(signed: [255, 255, 127]) \/\/ f = -129","","\/\/ From a big-endian magnitude byte array","let g = BInt(magnitude: [255, 255, 127]) \/\/ g = 16777087","","\/\/ Random value with specified bitwidth","let h = BInt(bitWidth: 43) \/\/ For example h = 3965245974702 (=0b111001101100111011000100111110100010101110)","","\/\/ Random value less than a given value","let i = h.randomLessThan() \/\/ For example i = 583464003284"]},{"anchor":"Converting-BInts","type":"heading","level":3,"text":"Converting BInt’s"},{"syntax":"swift","code":["let x = BInt(16777087)","","\/\/ To double","let d = x.asDouble() \/\/ d = 16777087.0","","\/\/ To strings","let s1 = x.asString() \/\/ s1 = \"16777087\"","let s2 = x.asString(radix: 16) \/\/ s2 = \"ffff7f\"","","\/\/ To big-endian magnitude byte array","let b1 = x.asMagnitudeBytes() \/\/ b1 = [255, 255, 127]","","\/\/ To big-endian 2's complement byte array","let b2 = x.asSignedBytes() \/\/ b2 = [0, 255, 255, 127]"],"type":"codeListing"},{"level":3,"text":"Operations","anchor":"Operations","type":"heading"},{"inlineContent":[{"type":"text","text":"The operations available to "},{"code":"BInt","type":"codeVoice"},{"text":" are:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Arithmetic:","type":"text"}],"type":"strong"},{"text":" addition, subtraction, multiplication, division, exponentiation, remainder and modulus, gcd and lcm","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Comparison:"}]},{"type":"text","text":" the six standard operations ==  !=  <  <=  >  >="}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Shift Operations:","type":"text"}],"type":"strong"},{"type":"text","text":" logical left- and right shifts"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Bit Operations:","type":"text"}],"type":"strong"},{"type":"text","text":" logical and, or, xor, not, bit manipulation"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Root Extraction:"}]},{"type":"text","text":" sqrt, sqrtMod, sqrtRemainder, isPerfectSquare, root, rootRemainder, isPerfectRoot"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Prime Number:"}]},{"type":"text","text":" probablePrime, nextPrime, isProbablyPrime, primorial"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Miscellaneous:"}],"type":"strong"},{"type":"text","text":" randomLessThan, binomial, factorial, fibonacci, jacobiSymbol, kroneckerSymbol, lucas"}],"type":"paragraph"}]}]}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"hierarchy":{"paths":[["doc:\/\/BigInt\/documentation\/BigInt"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/BigInt\/documentation\/BigInt\/AboutBInt"},"kind":"article","abstract":[{"type":"text","text":"Signed integers of unbounded size"}],"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/BigInt\/documentation\/BigInt\/AboutBFraction","doc:\/\/BigInt\/documentation\/BigInt\/AboutCRT","doc:\/\/BigInt\/documentation\/BigInt\/Performance","doc:\/\/BigInt\/documentation\/BigInt\/References","doc:\/\/BigInt\/documentation\/BigInt\/Algorithms"],"generated":true}],"references":{"doc://BigInt/documentation/BigInt/BInt":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BInt"}],"url":"\/documentation\/bigint\/bint","navigatorTitle":[{"kind":"identifier","text":"BInt"}],"identifier":"doc:\/\/BigInt\/documentation\/BigInt\/BInt","title":"BInt","abstract":[{"text":"The BInt structure","type":"text"}],"kind":"symbol","type":"topic","role":"symbol"},"doc://BigInt/documentation/BigInt/AboutBFraction":{"identifier":"doc:\/\/BigInt\/documentation\/BigInt\/AboutBFraction","role":"article","type":"topic","abstract":[{"text":"Signed fractions with numerator and denominator of unbounded size","type":"text"}],"kind":"article","title":"About BFraction","url":"\/documentation\/bigint\/aboutbfraction"},"doc://BigInt/documentation/BigInt/AboutCRT":{"identifier":"doc:\/\/BigInt\/documentation\/BigInt\/AboutCRT","role":"article","type":"topic","abstract":[{"text":"Chinese Remainder Theorem","type":"text"}],"kind":"article","title":"About CRT","url":"\/documentation\/bigint\/aboutcrt"},"doc://BigInt/documentation/BigInt/References":{"identifier":"doc:\/\/BigInt\/documentation\/BigInt\/References","role":"article","type":"topic","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}],"kind":"article","title":"References","url":"\/documentation\/bigint\/references"},"doc://BigInt/documentation/BigInt":{"abstract":[{"text":"Signed integers and fractions of unbounded size","type":"text"}],"kind":"symbol","url":"\/documentation\/bigint","type":"topic","role":"collection","identifier":"doc:\/\/BigInt\/documentation\/BigInt","title":"BigInt"},"doc://BigInt/documentation/BigInt/Algorithms":{"identifier":"doc:\/\/BigInt\/documentation\/BigInt\/Algorithms","role":"article","type":"topic","abstract":[{"text":"Some of the algorithms used in BigInt are described below","type":"text"}],"kind":"article","title":"Algorithms","url":"\/documentation\/bigint\/algorithms"},"doc://BigInt/documentation/BigInt/Performance":{"url":"\/documentation\/bigint\/performance","type":"topic","role":"article","abstract":[{"text":"Execution times for certain BigInt operations","type":"text"}],"identifier":"doc:\/\/BigInt\/documentation\/BigInt\/Performance","kind":"article","title":"Performance"}}}