{"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"metadata":{"roleHeading":"Article","role":"article","title":"Algorithms","modules":[{"name":"BigInt"}]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"","level":2,"text":""},{"type":"heading","level":3,"anchor":"Multiplication","text":"Multiplication"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Schonhage-Strassen FFT based algorithm for numbers with more than 384.000 bits","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"ToomCook-3 algorithm for numbers with more than 12.800 bits","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Karatsuba algorithm for numbers with more than 6.400 bits"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Basecase - Knuth algorithm M"}]}]}]},{"anchor":"Division-and-Remainder","text":"Division and Remainder","type":"heading","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Burnikel-Ziegler algorithm for divisors with more than 3.840 bits provided the dividend has at least 3.840 bits more than the divisor","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Basecase - Knuth algorithm D"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Exact Division - Jebelean’s exact division algorithm","type":"text"}]}]}],"type":"unorderedList"},{"level":3,"type":"heading","text":"Greatest Common Divisor","anchor":"Greatest-Common-Divisor"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Recursive GCD algorithm 9.4.6 from [CRANDALL] for numbers with more than 128.000 bits"}]}]},{"content":[{"inlineContent":[{"text":"Lehmer’s algorithm [KNUTH] chapter 4.5.2 for smaller numbers, with binary GCD basecase","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","anchor":"Extended-Greatest-Common-Divisor","level":3,"text":"Extended Greatest Common Divisor"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Recursive GCD algorithm 9.4.6 from [CRANDALL] for numbers with more than 64.000 bits, with extra logic to track cofactors","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Lehmer’s algorithm [KNUTH] chapter 4.5.2 and exercise 18 for smaller numbers","type":"text"}]}]}]},{"text":"Modular Exponentiation","type":"heading","level":3,"anchor":"Modular-Exponentiation"},{"type":"paragraph","inlineContent":[{"text":"Sliding window algorithm 14.85 from [HANDBOOK] using Barrett reduction for exponents with fewer than 2.048 bits","type":"text"},{"type":"text","text":" "},{"text":"and Montgomery reduction for larger exponents","type":"text"}]},{"anchor":"Inverse-Modulus","type":"heading","level":3,"text":"Inverse Modulus"},{"type":"paragraph","inlineContent":[{"text":"If the modulus is a (not too large) power of 2, the algorithm from [KOC] section 7,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"else it is computed via the extended GCD algorithm"}]},{"type":"heading","level":3,"anchor":"Square-Root","text":"Square Root"},{"inlineContent":[{"text":"Algorithm 1.12 (SqrtRem) from [BRENT] with algorithm 9.2.11 from [CRANDALL] as basecase","type":"text"}],"type":"paragraph"},{"anchor":"Square-Root-Modulo-a-Prime-Number","level":3,"text":"Square Root Modulo a Prime Number","type":"heading"},{"inlineContent":[{"type":"text","text":"Algorithm 2.3.8 from [CRANDALL]"}],"type":"paragraph"},{"text":"Random Numbers","anchor":"Random-Numbers","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Random BInt numbers are generated using the cryptographically secure function "},{"code":"SecRandomCopyBytes","type":"codeVoice"}]},{"level":3,"type":"heading","anchor":"Prime-Number-Test","text":"Prime Number Test"},{"inlineContent":[{"text":"Miller-Rabin test","type":"text"}],"type":"paragraph"},{"anchor":"Prime-Number-Generation","type":"heading","level":3,"text":"Prime Number Generation"},{"inlineContent":[{"text":"The algorithm from Java BigInteger translated to Swift","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"Factorial","anchor":"Factorial"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"SplitRecursive","type":"codeVoice"},{"type":"text","text":" algorithm from Peter Luschny: "},{"identifier":"https:\/\/www.luschny.de","type":"reference","isActive":true}]},{"level":3,"type":"heading","anchor":"Fibonacci","text":"Fibonacci"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"fastDoubling"},{"type":"text","text":" algorithm from Project Nayuki: "},{"identifier":"https:\/\/www.nayuki.io","type":"reference","isActive":true}]},{"level":3,"text":"Jacobi and Kronecker symbols","anchor":"Jacobi-and-Kronecker-symbols","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Algorithm 2.3.5 from [CRANDALL]"}]},{"type":"heading","level":3,"text":"Bernoulli Numbers","anchor":"Bernoulli-Numbers"},{"inlineContent":[{"type":"text","text":"Computed via Tangent numbers which is fast because it only involves integer arithmetic"},{"type":"text","text":" "},{"text":"but no fraction arithmetic","type":"text"}],"type":"paragraph"},{"anchor":"Chinese-Remainder-Theorem","type":"heading","level":3,"text":"Chinese Remainder Theorem"},{"inlineContent":[{"type":"text","text":"The Garner algorithm 2.1.7 from [CRANDALL]"}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/BigInt\/documentation\/BigInt\/Algorithms","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/bigint\/algorithms"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/BigInt\/documentation\/BigInt\/AboutBInt","doc:\/\/BigInt\/documentation\/BigInt\/AboutBFraction","doc:\/\/BigInt\/documentation\/BigInt\/AboutCRT","doc:\/\/BigInt\/documentation\/BigInt\/Performance","doc:\/\/BigInt\/documentation\/BigInt\/References"],"generated":true}],"abstract":[{"type":"text","text":"Some of the algorithms used in BigInt are described below"}],"hierarchy":{"paths":[["doc:\/\/BigInt\/documentation\/BigInt"]]},"kind":"article","references":{"https://www.nayuki.io":{"title":"https:\/\/www.nayuki.io","identifier":"https:\/\/www.nayuki.io","url":"https:\/\/www.nayuki.io","type":"link","titleInlineContent":[{"text":"https:\/\/www.nayuki.io","type":"text"}]},"doc://BigInt/documentation/BigInt/AboutBFraction":{"type":"topic","url":"\/documentation\/bigint\/aboutbfraction","title":"About BFraction","identifier":"doc:\/\/BigInt\/documentation\/BigInt\/AboutBFraction","role":"article","kind":"article","abstract":[{"type":"text","text":"Signed fractions with numerator and denominator of unbounded size"}]},"doc://BigInt/documentation/BigInt/Performance":{"url":"\/documentation\/bigint\/performance","abstract":[{"type":"text","text":"Execution times for certain BigInt operations"}],"kind":"article","title":"Performance","role":"article","identifier":"doc:\/\/BigInt\/documentation\/BigInt\/Performance","type":"topic"},"https://www.luschny.de":{"url":"https:\/\/www.luschny.de","titleInlineContent":[{"type":"text","text":"https:\/\/www.luschny.de"}],"identifier":"https:\/\/www.luschny.de","type":"link","title":"https:\/\/www.luschny.de"},"doc://BigInt/documentation/BigInt":{"identifier":"doc:\/\/BigInt\/documentation\/BigInt","kind":"symbol","role":"collection","url":"\/documentation\/bigint","title":"BigInt","type":"topic","abstract":[{"type":"text","text":"Signed integers and fractions of unbounded size"}]},"doc://BigInt/documentation/BigInt/References":{"identifier":"doc:\/\/BigInt\/documentation\/BigInt\/References","role":"article","url":"\/documentation\/bigint\/references","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"type":"topic","kind":"article","title":"References"},"doc://BigInt/documentation/BigInt/AboutCRT":{"type":"topic","identifier":"doc:\/\/BigInt\/documentation\/BigInt\/AboutCRT","role":"article","abstract":[{"text":"Chinese Remainder Theorem","type":"text"}],"title":"About CRT","kind":"article","url":"\/documentation\/bigint\/aboutcrt"},"doc://BigInt/documentation/BigInt/AboutBInt":{"type":"topic","title":"About BInt","identifier":"doc:\/\/BigInt\/documentation\/BigInt\/AboutBInt","url":"\/documentation\/bigint\/aboutbint","role":"article","kind":"article","abstract":[{"type":"text","text":"Signed integers of unbounded size"}]}}}